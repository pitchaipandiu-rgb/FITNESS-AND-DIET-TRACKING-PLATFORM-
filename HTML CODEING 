<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Fitness & Diet Tracker</title>
    <!-- Tailwind CSS via CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- React and ReactDOM via CDN -->
    <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
    <!-- Babel for JSX -->
    <script src="https://cdn.jsdelivr.net/npm/@babel/standalone/babel.min.js"></script>
    <!-- Chart.js for visualizations -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
    <style>
      body {
        font-family: "Roboto", sans-serif;
      }
      .btn-hover {
        transition: transform 0.2s ease-in-out;
      }
      .btn-hover:hover {
        transform: scale(1.05);
      }
      .modal-backdrop {
        transition: opacity 0.3s ease-in-out;
      }
      .error-text {
        color: red;
        font-size: 0.875rem;
        margin-top: 0.25rem;
      }
    </style>
  </head>
  <body class="bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
    <div id="root"></div>

    <script type="text/babel">
      const { useState, useEffect } = React;

      const FitnessDashboard = () => {
        const [userData, setUserData] = useState({
          caloriesIn: 1800,
          caloriesOut: 2200,
          weight: 72.5,
          steps: 8500,
          weightHistory: [
            { date: "2025-10-01", weight: 74 },
            { date: "2025-10-02", weight: 73.5 },
            { date: "2025-10-03", weight: 73 },
            { date: "2025-10-04", weight: 72.8 },
            { date: "2025-10-05", weight: 72.5 },
            { date: "2025-10-06", weight: 72.2 },
            { date: "2025-10-07", weight: 72 },
            { date: "2025-10-08", weight: 71.8 },
          ],
        });

        const [showWorkoutModal, setShowWorkoutModal] = useState(false);
        const [showMealModal, setShowMealModal] = useState(false);
        const [workoutForm, setWorkoutForm] = useState({
          name: "",
          duration: "",
          calories: "",
        });
        const [mealForm, setMealForm] = useState({
          name: "",
          calories: "",
          carbs: "",
          protein: "",
          fat: "",
        });
        const [logs, setLogs] = useState([]);
        const [error, setError] = useState("");

        useEffect(() => {
          try {
            const ctx = document.getElementById("weightChart").getContext("2d");
            const chartData = {
              labels: userData.weightHistory.map((d) => d.date),
              datasets: [
                {
                  label: "Weight (kg)",
                  data: userData.weightHistory.map((d) => d.weight),
                  borderColor: "rgb(75, 192, 192)",
                  backgroundColor: "rgba(75, 192, 192, 0.2)",
                  tension: 0.1,
                  fill: true,
                },
              ],
            };
            const chartOptions = {
              responsive: true,
              plugins: {
                legend: { position: "top" },
                title: { display: true, text: "Weekly Weight Progress" },
              },
              scales: {
                y: {
                  beginAtZero: false,
                  title: { display: true, text: "Weight (kg)" },
                },
                x: { title: { display: true, text: "Date" } },
              },
            };
            new Chart(ctx, {
              type: "line",
              data: chartData,
              options: chartOptions,
            });
          } catch (err) {
            console.error("Chart initialization failed:", err);
          }
        }, [userData.weightHistory]);

        const handleWorkoutSubmit = (e) => {
          e.preventDefault();
          console.log("Workout form submitted:", workoutForm);
          setError("");
          const name = workoutForm.name.trim();
          const duration = parseInt(workoutForm.duration);
          const calories = parseInt(workoutForm.calories);
          if (!name) {
            setError("Exercise Name is required.");
            return;
          }
          if (!duration || duration <= 0) {
            setError("Duration must be a positive number.");
            return;
          }
          if (!calories || calories <= 0) {
            setError("Calories Burned must be a positive number.");
            return;
          }
          try {
            setLogs([
              ...logs,
              {
                type: "Workout",
                ...workoutForm,
                timestamp: new Date().toLocaleString(),
              },
            ]);
            setUserData({
              ...userData,
              caloriesOut: userData.caloriesOut + calories,
            });
            setWorkoutForm({ name: "", duration: "", calories: "" });
            setShowWorkoutModal(false);
            alert("Workout logged successfully!");
          } catch (err) {
            console.error("Workout submission error:", err);
            setError("Failed to save workout. Please try again.");
          }
        };

        const handleMealSubmit = (e) => {
          e.preventDefault();
          console.log("Meal form submitted:", mealForm);
          setError("");
          const name = mealForm.name.trim();
          const calories = parseInt(mealForm.calories);
          if (!name) {
            setError("Food Name is required.");
            return;
          }
          if (!calories || calories <= 0) {
            setError("Calories must be a positive number.");
            return;
          }
          try {
            setLogs([
              ...logs,
              {
                type: "Meal",
                ...mealForm,
                timestamp: new Date().toLocaleString(),
              },
            ]);
            setUserData({
              ...userData,
              caloriesIn: userData.caloriesIn + calories,
            });
            setMealForm({
              name: "",
              calories: "",
              carbs: "",
              protein: "",
              fat: "",
            });
            setShowMealModal(false);
            alert("Meal logged successfully!");
          } catch (err) {
            console.error("Meal submission error:", err);
            setError("Failed to save meal. Please try again.");
          }
        };

        return (
          <div className="p-4 max-w-md mx-auto bg-white dark:bg-gray-800 rounded-lg shadow-md min-h-screen">
            <h1 className="text-2xl font-bold text-center mb-4 text-orange-500 dark:text-orange-400">
              Fitness & Diet Tracker
            </h1>

            {/* Quick Stats */}
            <div className="grid grid-cols-2 gap-4 mb-6">
              <div className="bg-green-100 dark:bg-green-700 p-3 rounded text-center">
                <h2 className="text-lg font-semibold">Calories In</h2>
                <p className="text-2xl">{userData.caloriesIn}</p>
              </div>
              <div className="bg-red-100 dark:bg-red-700 p-3 rounded text-center">
                <h2 className="text-lg font-semibold">Calories Out</h2>
                <p className="text-2xl">{userData.caloriesOut}</p>
              </div>
              <div className="bg-blue-100 dark:bg-blue-700 p-3 rounded text-center">
                <h2 className="text-lg font-semibold">Weight</h2>
                <p className="text-2xl">{userData.weight}kg</p>
              </div>
              <div className="bg-purple-100 dark:bg-purple-700 p-3 rounded text-center">
                <h2 className="text-lg font-semibold">Steps</h2>
                <p className="text-2xl">{userData.steps.toLocaleString()}</p>
              </div>
            </div>

            {/* Progress Chart */}
            <div className="mb-6">
              <h2 className="text-lg font-semibold mb-2">Weight Progress</h2>
              <canvas id="weightChart" className="w-full"></canvas>
            </div>

            {/* Recent Logs */}
            <div className="mb-6">
              <h2 className="text-lg font-semibold mb-2">Recent Logs</h2>
              <ul className="space-y-2">
                {logs.slice(-3).map((log, index) => (
                  <li
                    key={index}
                    className="bg-gray-50 dark:bg-gray-700 p-2 rounded"
                  >
                    <span className="font-semibold">{log.type}</span>:{" "}
                    {log.name} at {log.timestamp}
                  </li>
                ))}
              </ul>
            </div>

            {/* Quick Actions */}
            <div className="space-y-2">
              <button
                onClick={() => setShowWorkoutModal(true)}
                className="w-full bg-orange-500 text-white py-2 rounded hover:bg-orange-600 btn-hover"
              >
                Log Workout
              </button>
              <button
                onClick={() => setShowMealModal(true)}
                className="w-full bg-green-500 text-white py-2 rounded hover:bg-green-600 btn-hover"
              >
                Log Meal
              </button>
            </div>

            {/* Workout Modal */}
            {showWorkoutModal && (
              <div className="fixed inset-0 bg-black bg-opacity-50 modal-backdrop flex items-center justify-center">
                <div className="bg-white dark:bg-gray-800 p-6 rounded-lg w-11/12 max-w-md">
                  <h2 className="text-xl font-bold mb-4">Log Workout</h2>
                  {error && <p className="error-text">{error}</p>}
                  <form onSubmit={handleWorkoutSubmit}>
                    <div className="mb-4">
                      <label className="block text-sm font-medium mb-1">
                        Exercise Name *
                      </label>
                      <input
                        type="text"
                        value={workoutForm.name}
                        onChange={(e) =>
                          setWorkoutForm({
                            ...workoutForm,
                            name: e.target.value,
                          })
                        }
                        className="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600"
                        placeholder="e.g., Running"
                      />
                    </div>
                    <div className="mb-4">
                      <label className="block text-sm font-medium mb-1">
                        Duration (minutes) *
                      </label>
                      <input
                        type="number"
                        value={workoutForm.duration}
                        onChange={(e) =>
                          setWorkoutForm({
                            ...workoutForm,
                            duration: e.target.value,
                          })
                        }
                        className="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600"
                        placeholder="e.g., 30"
                        min="1"
                      />
                    </div>
                    <div className="mb-4">
                      <label className="block text-sm font-medium mb-1">
                        Calories Burned *
                      </label>
                      <input
                        type="number"
                        value={workoutForm.calories}
                        onChange={(e) =>
                          setWorkoutForm({
                            ...workoutForm,
                            calories: e.target.value,
                          })
                        }
                        className="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600"
                        placeholder="e.g., 300"
                        min="1"
                      />
                    </div>
                    <div className="flex justify-end space-x-2">
                      <button
                        type="button"
                        onClick={() => {
                          setShowWorkoutModal(false);
                          setError("");
                        }}
                        className="px-4 py-2 bg-gray-300 dark:bg-gray-600 rounded hover:bg-gray-400"
                      >
                        Cancel
                      </button>
                      <button
                        type="submit"
                        className="px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600"
                      >
                        Save
                      </button>
                    </div>
                  </form>
                </div>
              </div>
            )}

            {/* Meal Modal */}
            {showMealModal && (
              <div className="fixed inset-0 bg-black bg-opacity-50 modal-backdrop flex items-center justify-center">
                <div className="bg-white dark:bg-gray-800 p-6 rounded-lg w-11/12 max-w-md">
                  <h2 className="text-xl font-bold mb-4">Log Meal</h2>
                  {error && <p className="error-text">{error}</p>}
                  <form onSubmit={handleMealSubmit}>
                    <div className="mb-4">
                      <label className="block text-sm font-medium mb-1">
                        Food Name *
                      </label>
                      <input
                        type="text"
                        value={mealForm.name}
                        onChange={(e) =>
                          setMealForm({ ...mealForm, name: e.target.value })
                        }
                        className="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600"
                        placeholder="e.g., Chicken Salad"
                      />
                    </div>
                    <div className="mb-4">
                      <label className="block text-sm font-medium mb-1">
                        Calories *
                      </label>
                      <input
                        type="number"
                        value={mealForm.calories}
                        onChange={(e) =>
                          setMealForm({ ...mealForm, calories: e.target.value })
                        }
                        className="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600"
                        placeholder="e.g., 400"
                        min="1"
                      />
                    </div>
                    <div className="mb-4">
                      <label className="block text-sm font-medium mb-1">
                        Carbs (g, optional)
                      </label>
                      <input
                        type="number"
                        value={mealForm.carbs}
                        onChange={(e) =>
                          setMealForm({ ...mealForm, carbs: e.target.value })
                        }
                        className="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600"
                        placeholder="e.g., 50"
                        min="0"
                      />
                    </div>
                    <div className="mb-4">
                      <label className="block text-sm font-medium mb-1">
                        Protein (g, optional)
                      </label>
                      <input
                        type="number"
                        value={mealForm.protein}
                        onChange={(e) =>
                          setMealForm({ ...mealForm, protein: e.target.value })
                        }
                        className="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600"
                        placeholder="e.g., 30"
                        min="0"
                      />
                    </div>
                    <div className="mb-4">
                      <label className="block text-sm font-medium mb-1">
                        Fat (g, optional)
                      </label>
                      <input
                        type="number"
                        value={mealForm.fat}
                        onChange={(e) =>
                          setMealForm({ ...mealForm, fat: e.target.value })
                        }
                        className="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600"
                        placeholder="e.g., 15"
                        min="0"
                      />
                    </div>
                    <div className="flex justify-end space-x-2">
                      <button
                        type="button"
                        onClick={() => {
                          setShowMealModal(false);
                          setError("");
                        }}
                        className="px-4 py-2 bg-gray-300 dark:bg-gray-600 rounded hover:bg-gray-400"
                      >
                        Cancel
                      </button>
                      <button
                        type="submit"
                        className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
                      >
                        Save
                      </button>
                    </div>
                  </form>
                </div>
              </div>
            )}
          </div>
        );
      };

      // Render React component
      try {
        const root = ReactDOM.createRoot(document.getElementById("root"));
        root.render(<FitnessDashboard />);
      } catch (err) {
        console.error("React rendering failed:", err);
      }
    </script>
  </body>
</html>